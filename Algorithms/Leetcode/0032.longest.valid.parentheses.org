#+title: Longest Valid Parentheses

Given a string consists of '(' and ')' characters, return the longest valid parentheses substring.

* Solution: 1 Dimensional DP

  We can define a valid parentheses string recursively:
  1. "" is valid
  2. If a and b are valid, then their concatenation is also valid: a + b
  3. If a is valid, then '(' + a + ')' is also valid.
  
  let ~DP[i]~ be the longest valid parentheses in =s= ending at index i, then we can define it as follows:
  1. ~dp[i] = 0~ if ~s[i] euqals '('~, no valid parentheses string can end with a left parenthese.
  2. ~dp[1] = 2~ if ~s[0] equals '('~ and ~s[1] equals ')'~.
  3. ~dp[i] = 2 + dp[i-2]~ if ~s[i-1] equals '('~ and ~s[i] equals ')'~. From definition #2
  4. If ~s[i] equals ')'~ but ~s[i-1] equals ')'~, let /j/ be the index to the character immediately before the longest valid parenthesis
     ending at /i-1/, \(j=i-1-dp[i-1]\) and ~s[j] equals '('~:
     \(dp[i] = 2 + dp[i - 1] + [j > 0] * dp[j - 1])\)
 
* Code

  #+begin_src C++
    int longestValidParentheses(string s) {
        vector<int> dp(s.length(), 0);
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            if (s[i] == ')') {
                if (s[i-1] == '(') {
                    dp[i] = 2 + (i > 1 ? dp[i-2] : 0);
                } else {
                    int j = i - 1 - dp[i-1];
                    if (j >= 0 && s[j] == '(') {
                        dp[i] = 2 + dp[i-1] + (j > 0 ? dp[j-1] : 0);
                    }
                }
                if (dp[i] > ans) ans = dp[i];
            }
        }
        return ans;
    }
  #+end_src
