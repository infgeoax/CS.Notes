#+title: Longest Valid Parentheses

Given a string consists of '(' and ')' characters, return the longest valid parentheses substring.

* Solution: 1 Dimensional DP

  We can define a valid parentheses string recursively:
  1. "" is valid
  2. If a and b are valid, then their concatenation is also valid: a + b
  3. If a is valid, then '(' + a + ')' is also valid.
  
  If we define =DP[i]= as the longest valid parentheses in =s= ending at index i, then we can define it as follows:
  1. dp[i] = 0 if s[i] == '(', no valid parentheses string can end with a left parenthese.
  2. dp[1] = 2 if s[0] == '(' and s[1] == ')'.
  3. dp[i] = 2 + dp[i-2] if s[i-1] == '(' and s[i] == ')'. Rule #2
  4. Let j = i - 1 - dp[i - 1] and j >= 0: Rule #3 and #2 (maybe)
     1. dp[i] = 2 + dp[i - 1] + (j > 0 ? dp[j - 1] : 0), if s[i] == ')' and s[j] == '('
        
