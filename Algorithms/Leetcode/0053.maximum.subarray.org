#+title: Maximum Subarray

* DP (sort of)

  Iterating through the array, we keep track of the maximum sum that
  ends at the current location. We calculate this value from its
  previous one. Now, if the previous value is negative, we simply
  "reset" the value to the current element - because the sum would be
  smaller.

  #+begin_src C++
    int maxSubArray(vector<int>& nums) {
      int curMax = -10001, answer = -10001;
      for (auto x : nums) {
        curMax = max(curMax + x, x);
        answer = max(answer, curMax);
      }
      return answer;
    }
  #+end_src
