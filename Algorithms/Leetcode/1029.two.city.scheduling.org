#+title: Two City Scheduling

* Top-down DP

  Consider the cost function =F(i, a)=, where =i= is the total number of candidates examined, among which =a= candidates are scheduled for flight to city
  A. Specifically, =F(i, a)= gives the minimum cost for the rest \(2*n - i\) candidates, given that the first i candidates have already been processed and the
  number of candidates were given the flight to city A.

  1. If i == 2*n, the min cost is 0, no more candidates need to be scheduled.
  2. If a == n, then the min cost is the sum of all the cost to send candidates to city B for candidates i, i+1, ..., 2n-1
  3. If i - a == n, then the min cost is the sum of all the cost to send candidates to city A for candidates i, i+1, ..., 2n-1
  4. Otherwise, we either choose city A for candidate i, and min cost is costs[i][0] + F(i + 1, a + 1) or
  5. we choose city B for candidate i, and min cost is costs[i][1] + F(i + 1, a)

* Greedy: sort and pick the first n for one city

  The idea is, if a candidate has different costs to A and B, we always pick the smaller cost.
  
  Sort the cost array by the difference between city A and B.

