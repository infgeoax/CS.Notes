#+title: Lowest Common Ancestor

Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.

#+begin_src C++
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(intx, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
#+end_src

* Ideas

  1. About deepest leaves, the number could be 1, 2, 3, ...
  2. To get the lowest common ancestor of two leaves, one way is to compare their paths from root and find the node where they diverge.
  3. One approach would be to do a pre-order traverse, keeping track of the path from root to the leaves, once we reach a leave:
     - It's the first leave we've seen, so it could be the answer (if it's the only deepest leave in the tree), we remember the path to this node;
     - It's not the first leave, and it's deeper than the leave we've seen, so we replace the answer with this one;
     - It's not the first leave, and it's on the same depth, we compare the paths;
     - It's not the first leave, and it's shallower than the deepest leave we've seen, ignore it.
  4. The things to remember: current LCA node (initially null), current max depth (initially -1), current path (initially empty)

         #+begin_src C++
           TreeNode* lca;
           int maxDepth;
           vector<TreeNode*> curDeepestPath;

           TreeNode* lcaDeepestLeaves(TreeNode* root) {
               lca = nullptr;
               maxDepth = -1;
               curDeepestPath.clear();
               curDeepestPath.reserve(1000);
               vector<TreeNode*> path {root};
               path.reserve(1000);
               preorder(root, 0, path);
               return lca;
           }

           void preorder(TreeNode* root, int depth, vector<TreeNode*> path) {
               bool isLeaf = !root->left && !root->right;
               if (isLeaf) {
                   if (!lca || maxDepth < depth) {
                       lca = root;
                       maxDepth = depth;
                       curDeepestPath = path;
                   } else if (maxDepth == depth) {
                       int n = min(path.size(), curDeepestPath.size());
                       int i = 0;
                       while (i < n && curDeepestPath[i] == path[i]) {
                           i++;
                       }
                       lca = path[i - 1];
                   }
               } else {
                   if (root->left) {
                       path.push_back(root->left);
                       preorder(root->left, depth + 1, path);
                       path.pop_back();
                   }
                   if (root->right) {
                       path.push_back(root->right);
                       preorder(root->right, depth + 1, path);
                       path.pop_back();
                   }
               }
           }
         #+end_src

* Recursive approach

  This is based on the observation that if the depth of left tree is greater than that of the right, then the LCA is in the left tree and vice versa. Now if the
  depths are equal, LCA is the current root. This applies to all sub-trees of the input, including the root. Now we need a way to return the depth *and* the
  local LCA back to the root call, in C++ we can use pair.

      #+begin_src C++
        TreeNode* lcaDeepestLeaves(TreeNode* root) {
            return dp(root).first;
        }

        // Returns the LCA and max depth of the given tree.
        pair<TreeNode*, int> dp(TreeNode* root) {
            if (!root) return make_pair(nullptr, 0);

            auto l = dp(root->left);
            auto r = dp(root->right);
            if (l.second == r.second) {
                // max depth of left and right are equal, there exist at least one leaf node in both of left and right tree.
                // And root is the Lowest Common Ancestor for them.
                return make_pair(root, l.second + 1);
            } else if (l.second > r.second) {
                // left tree has deeper leaf node, return its LCA and depth + 1.
                return make_pair(l.first, l.second + 1);
            } else {
                // right tree has deeper left node, ...
                return make_pair(r.first, r.second + 1);
            }
        }
      #+end_src
