#+title: Critical Connections in a Network

There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

* Analysis

  If we consider a undirected graph where each node is a server and edges are connections between servers, then a critical connection is an edge in the graph
  such that removing it would create two graphs that are not connected. Such an edge is also called a bridge.

  Algorithm to find all the bridges in a graph is Tarjan's algorithm.

  In this specific problem, observe that:
  1. If number of edges is n - 1, we have a tree and every edge is critical
  2. Cycles don't have critical edge.
  3. If we can detect ALL the cycles in the given graph and remove all the edges in those cycles, we are left with the critical edges.
  4. DFS can detect *a cycle* if the next node expanded is already visited.

* Ranks of nodes and how it can be used to remove edges in cycles

  Consider the path generated by DFS. Assign the first node a rank of 0, second a rank of 1, etc. This property can be used as the visited attribute but
  contains more information. If we are at node v and its rank is r, and we expand its neighbours:
  1. If the neighbour has a rank r - 1, then it's the current node v's parent along the DFS path, we do not expand it.
  2. Otherwise we recursively go along this edge.
  3. A cycle is found if we encounter a node whose rank is less than or equal to the current rank r.
  4. How do we remove all the edges in the cycle? When the recursive call to one of the neighbour returns with a rank that's less than or equal to
     the current rank, then we know the edge to that neighbour is on a cycle.
 
  
