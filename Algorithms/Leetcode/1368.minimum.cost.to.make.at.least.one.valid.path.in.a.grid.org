#+title: Mimimum Cost to Make at Least One Valid Path in a Grid

Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:

1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])
Notice that there could be some signs on the cells of the grid that point outside the grid.

You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest.

You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.

Return the minimum cost to make the grid have at least one valid path.

* Dijkstra's Algorithm

  Note: you don't need an IndexMQ, just push the relaxed vertex to the priority queue with updated distance would work, though it's not optimal.

  It's a shortest path problem to find the SP from (0, 0) to (m-1, n-1). If we move along the arrow, there's no cost, otherwise the cost is 1. Minimum
  operations corresponding to the cost along the shortest path.

* 0-1 BFS

  Actually we can do better than Dijkstra's Algorithm, as the cost is either 0 or 1. We can do a special BFS using a deque data structure.

  When expanding the nodes, if the cost is 0, we put it in front of the deque, otherwise put it in the back. This makes sure that we can always find the shortest path.

  It's not going to work if we have more cost values.
