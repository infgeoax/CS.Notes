#+title: Sum of All Odd Length Subarrays

Given an array of positive integers, calculate the sum of all possible odd length subarrays.

* ? Count the number of occurances of each element

  For array, =[1, 4, 2, 5, 3]=
  
  | x | freq |
  |---+------|
  | 1 |    3 |
  | 4 |    4 |
  | 2 |    5 |
  | 5 |    4 |
  | 3 |    3 |

  For array =[1,2,3,4,5,6]=

  #+begin_example
  Len 1: [1], [2], [3], [4], [5], [6]
  Len 3: [1,2,3], [2,3,4], [3,4,5], [4,5,6]
  Len 5: [1,2,3,4,5], [2,3,4,5,6]
  #+end_example
  
  | x | freq |
  |---+------|
  | 1 |    3 |
  | 2 |    5 |
  | 3 |    6 |
  | 4 |    6 |
  | 5 |    5 |
  | 6 |    3 |

  $Freq[0] = Freq[n - 1] = ceil(n/2) $

  #+begin_src C++
    int sumOddLengthSubarrays(vector<int>& arr) {
        int sum = 0;
        int n = arr.size();
        int f0 = n / 2 + (n % 2 == 0 ? 0 : 1);
        vector<int> freq(n, 0);
        freq[0] = f0;
        int d = f0 - (n%2==0?1:2);
        for (int i = 1; i < n; ++i) {
            if (n%2==0) {
                freq[i] = freq[i - 1] + d;
                d--;
            } else {
                freq[i] = freq[i - 1] + d;
                if (i%2 == 0) {
                    d-=2;
                }
            }
        }

        for (int i = 0; i < n; ++i) {
            sum += freq[i] * arr[i];
        }
        return sum;
    }
  #+end_src
  
