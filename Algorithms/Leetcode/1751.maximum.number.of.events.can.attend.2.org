#+title: Maximum Number of Events That Can Be Attended II

Can attend at most k events. Each event has a value, events cannot overlap. Maximize the value.

* Analysis (DP?)

  - if k == 0, return 0
  - if k == 1, return event with max value
  - if k > 1, consider the first event, events[0], we have two choices: attend event[0] or don't attend events[0]
    - if attend, the value we get is events[0].value + maxValue(remaining events that don't overlap, k - 1)
    - if don't attend, the value we get is maxValue(remaining events, k)
    - pick the max of the two

    #+begin_src C++
      int n;
      // Slow version
      int maxValue(vector<vector<int>>& events, int k) {
          // Sort by start day
          sort(events.begin(), events.end(), [](const auto& a, const auto& b) {
              return a[0] < b[0];
          });
          n = events.size();
          vector<vector<unordered_map<int, int>>> mem(n, vector<unordered_map<int, int>>(k));
          return helper(events, 0, k, 0, mem);
      }

      int helper(vector<vector<int>>& events, int i, int k, int lastDay, vector<vector<unordered_map<int, int>>> &mem) {
          if (k <= 0) return 0;
          if (i >= n) return 0;
          auto iter = mem[i][k - 1].find(lastDay);
          if (iter != mem[i][k - 1].end()) return iter->second;

          int v1 = 0;
          if (events[i][0] > lastDay) {
              v1 = events[i][2] + helper(events, i + 1, k - 1, events[i][1], mem);
          }
          int v2 = helper(events, i + 1, k, lastDay, mem);
          return mem[i][k-1][lastDay] = max(v1, v2);
      }
    #+end_src
    
  #+begin_src C++
    // Bottom-up DP.
    int n;
    int maxValue(vector<vector<int>>& events, int k) {
      // Bottom-up DP
      // dp[i][k] = 0 if k == 0 or i == 0, zero allowed events, or zero events to choose from
      // dp[i][k] = max(dp[j][k - 1] + event[i-1][2], dp[i - 1][k]) where j is the max index where events[j-1][1] < events[i-1][0]
      // It's the maximum of the two choices: attend event i-1 get value[i-1] and attend all events ends before event[i-1][0]
      // or don't attend event i-1 and attend all events before event i - 1 (without restrictions).
      n = events.size();
      vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));

      // Sort by non decreasing end days 
      sort(events.begin(), events.end(), [](const auto& e1, const auto& e2) {
        return e1[1] < e2[1];
      });

      // Precompute the prev table, to answer the question efficiently: for event i, what's the event with the largest index that ends before event i starts.
      vector<int> prev(n, -1);
      for (int i = 1; i < n; ++i) {
        int l = i - 1;
        while (l >= 0 && events[l][1] >= events[i][0]) l--;
        prev[i] = l;
      }

      for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= k; ++j) {
          int start = events[i - 1][0];
          int l = prev[i - 1];
          int v1 = events[i - 1][2];
          if (l >= 0) v1 += dp[l + 1][j - 1];
          int v2 = dp[i - 1][j];
          dp[i][j] = max(v1, v2);
        }
      }

      return dp[n][k];
    }
  #+end_src
  
