#+title: Number of Ways to Rearrange Sticks With K Sticks Visible

There are n uniquely-sized sticks whose lengths are integers from 1 to n. You want to arrange the sticks such that exactly k sticks are visible from the left. A
stick is visible from the left if there are no longer sticks to the left of it.

For example, if the sticks are arranged [1,3,2,5,4], then the sticks with lengths 1, 3, and 5 are visible from the left.
Given n and k, return the number of such arrangements. Since the answer may be large, return it modulo 10^9 + 7.

* DP (TLE)

  Tricky part is the recursive relationship.
  
  1. If k == 1, the answer is (n-1)!, that is to put all the sticks behind the longest stick and they have (n-1)! arrangements.
  2. If k == n, the answer is 1, the only way is to order the sticks from shortest to longest.
  3. For any other k, we can choose at most n - k sticks to go behind the longest stick, let the number be m (0 <= m <= n - k), and we'll have \(m! * C(m,
     n - 1)\) ways of arranging those sticks. After this, we'll have a smaller problem to solve: arrange n - m - 1 sticks so that k - 1 of them are visible from
     left.

     #+begin_src C++
       using ll = long long;
       int M = static_cast<int>(1e9+7);
       vector<vector<int>> memo;
       int rearrangeSticks(int n, int k) {
           memo.assign(n + 1, vector<int>(k + 1, -1));
           return dp(n, k);
       }
       int dp(int n, int k) {
           if (k == 1) return fact(n-1);
           if (k == n) return 1;
           int c = n - k;
           int ans = 0;
           for (int m = 0; m <= c; ++m) {
               ll f = fact(n - 1, n - m);
               f = (f * dp(n - m - 1, k - 1)) % M;
               ans = static_cast<int>((ans + f) % M);
           }
           return ans;
       }
       int fact(ll n, ll e = 1) {
           int ans = 1;
           for (ll x = n; x >= e; --x) {
               ans = static_cast<int>((ans * x) % M);
           }
           return ans;
       }
     #+end_src

* Simpler DP (deciding the right most stick first)

  Consider the stick that goes to the right most position:
  - if it's the longest one it will be visible, and we are left with n - 1 sticks and k - 1 to make visible
  - if it's not the longest one it will be invisible (blocked by the longest), and we are left with n - 1 sticks and k to make visible.
