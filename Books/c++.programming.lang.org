#+title: The C++ Programming Language 4th Edition

* Ch6. Types and Declarations
  1. =size_t=
     
     Defined in header <cstddef>;
     Implementation-defined unsigned integer type;
     Can hold the size in bytes of every object.
     
  2. =ptrdiff_t=

     Defiend in header <cstddef>;
     Hold the result of subtracting two pointers (to get a number of elements)

  3. Alignment*

     On some machines, the bytes used to hold an object must have proper *alignment* for the hardward to access it efficiently.
     This can affect object layouts: structs sometimes contains "holes" to improve alignment.

     The =alignof= returns the alignment of its argument expression.

  4. Type declaration

     1. =char *kings[]= array of pointers to char (prefix binds tighter than postfix)
        =char (*kings)[]= pointer to a char array.

  5. Initialization

     Four syntaxes to use initializer:

     ={}= /list initialization/ does not allow narrowing. e.g. An integer cannot be converted to another integer that cannot hold its value, =char= to =int= is
     ok, but not =int= to =char=. Floating point and integer values cannot be converted to each other.

     #+BEGIN_SRC C++
       X a1 {v}; // Only this style can be used in every context. Except when using together with auto.
       X a2 = {v};
       X a3 = v;
       X a4(v);

       auto z1 {99}; // z1 is an initializer_list<int>
     #+END_SRC

  6. Deducing a Type
     1. =auto= to deduce the type of an object from its initializer.

     2. =decltype= for deducing the type of something that's not a initializer.
        E.g. An operator that adds two matrices of different element type together.
        Note it's using suffix return type syntax =auto f(T, U) -> type=

        #+begin_src C++
          template<class T, class U>
          auto operator+(const Matrix<T>& a, const Matrix<U>& b) -> Matrix<decltype(T{}+U{})>;
        #+end_src

  7. Lvalues and Rvalues
     1. =lvalue=
        : an expression that refres to an object - a contiguous region of memory.

     2. =rvalue=
        : not an lvalue. e.g. temporary value (returned by a function)

     3. Two properties of an object when it comes to addressing, copying and moving:
        1. Has identity (i): program has a name of, pointer to, or reference to the object. So there's a way to determine if two objects are the same, or has the
           object been modified yet.

        2. Movable (m): The object can be moved from.

        3. Three out of four combinations of the two properties are useful in describing the C++ rules:
           - lvalue: i and !m

           - xvalue: i and m (extraordinary/exper only)

           - glvalue: i (generalized lvalue)

           - rvalue: m

           - prvalue: !i and m (pure rvalue)

  8. Object lifetimes
     - /Automatic/: Objects declared in a function, created on definition and destroyed when its name goes out of scope. Usually allocated on stack.

     - /Static/: Objects declared in global or namespace scope and =static= declared in functions or classes. Created once and live until program terminates.

     - /Free store/: Objects created by =new= and destroyed by =delete=. Programmers can control its life time.

     - /Temporary objects/: intermediate results in a computation or an object used to hold a value for a reference to =const= argument.

     - /Thread-local/ objects declared =thread_local=: created when their thread is created and destroyed with the thread.

  9. Type Alias
     - =using= keyword can be used to introduce alias for an existing type:

       #+begin_src c++
       using Pchar = char*;
       // or template alias
       template<typename T>
       using Vector = std::vector<T, My_allocator<T>>;

       Vector<int> nums; // vector using My_allocator<T>.
       #+end_src

* Ch7. Pointers, Arrays and Referneces
  1. =nullptr=
     Represent a point that points to nothing, can be assigned to any pointer type.

     Standard conversions allow =0= to be used as a constant of pointer or pointer-to-member type.

  2. Arrays

     Given type =T=, =T[size]= is the type array of size elements of type T. Subscript operator =[]= can be used to access an array element, or use a pointer.

     #+begin_src C++
     void f() {
         int aa[10];
         aa[6] = 9; // assign aa's 7th element
         int x = aa[99]; // undefined behaviour
     }
     #+end_src

     *There's no array assignment, and the name of an array implicitly converts to a pointer to its first element (at the slightest provocation).*

     C++ string literals are 0-terminated char arrays.

  3. Initializing arrays

     #+begin_src C++
     int v1[] = {1, 2, 3, 4 };
     char v2[] = {'a', 'b', 'c', 0};
     int v3[2] = {1, 2, 3}; // error, too many initializers
     int v5[8] = {1,2,3,4}; // ok, rest elements are set to 0.
     #+end_src

     *You cannot initialize one array with another.*

     #+begin_src C++
     int v6[8] = v5; // error: can't copy an array (cannot assign int* to an array)
     v6 = v6; // error: no array assignment.
     #+end_src

  4. String literals

     Type: char array of appropriate size, terminated with 0.

     Statically allocated, so safe to return from a function.

  5. Raw string literals

     #+begin_src C++
     string s = R"(\w\\w)";
     string t = R"**(1
     22
     333)**"; // equivalent to "1\n22\n333"
     #+end_src

  6. Larger character sets

     String prefix =L""= represents a string of wide characters.

     #+begin_src C++
     const wchar_t w[] = L"angst";
     #+end_src

     Six string prefixes for unicode string literals.

     #+begin_src C++
       u8""; // utf-8
       u""; // utf-16
       U""; // utf-32
     #+end_src

  7. Pointers into Arrays

     - We can have pointer to one-beyond the last element of the array, but not more. Besides, such a pointer can only be used to compare with other pointers to get number of elements.

  8. Passing arrays
     - Arrays cannot be passed by value directly, it's passed as a pointer to its first element.
     - Two-dimensional matrix:
       #+begin_src C++
         void print_mi5(int m[][5], int dim1); // second dimension is required for the compiler to generate code for =m[i][j]=
         void print_mij(int m[][], int dim1, int dim2); // Error: need the second dimension to locate the elements.
         void print_mij(int *m, int dim1, int dim2); // OK, access element like =m[i * dim2 + j]=, but not so obvious.
         int test() { // to call print_mij(int*, int, int):
             int v[3][5] = {
                 {0,1,2,3,4}, {10,11,12,13,14}, {20,21,22,23,24}
             };
             print_mij(&v[0][0], 3, 5); // or v[0]
         }
       #+end_src
  9. Pointers and const
     - =constexpr=: enable compile time evaluation

     - =const=: immutable objects

     - =const T*=: pointer to immutable T object, pointer can change, object cannot.

     - =T*const=: const pointer to mutable T object, object can change, pointer cannot.

  10. Pointers and ownership
      - Generally, put a pointer that represents ownership in a resource handle, e.g. =vector=, =string= and =unique_ptr=.

      - Pointers don't always represent valid ownership, e.g. nullptr, pointers that points to invalid locations, or pointers used to access inside of an array, etc.

  11. References
      - Unlike pointers, references must be initialized to bind to an object, and cannot be bound to another object after initialization. And there's no null reference.

      - Usually implemented as address to the object.

      - /lvalue references/ refer to objects whose value we want to change

      - /const references/ refer to objects whose value we do not want to change

      - /rvalue references/ refer to objects whose value we do not need to preserve after use.

  12. Lvalue references

      - =X&= is a reference type to =X=, it's used to reference to lvalues, /lvalue reference/.

      - *Cannot define an array of references.*

      - Initializer for a non-const reference =T&= must be an lvalue of type =T=, however

      - Initializer for a const reference =const T&= need not be an lvalue or event of type =T=, steps:

        1. Implicit type convertion to =T= if necessary

        2. Result value is placed in a temporary variable of type =T= (which has the life cycle as the reference it's initializing)

        3. finally, this temporary variable is used to initialize the reference.

        4. *This enables pass temporary objects to a function as const references.*

  13. Rvalue reference

      - =string&& rr1{f()}; // bind rr1 to rvalue (a temporary)=

      - Both a =const= lvalue reference and an rvalue reference can bind to an rvalue.

      - Purpose of rvalue references is to implement a "destructive read" for optimization (otherwise copy may happen)

      - Sometimes the programmer knows that an object won't be used again, even though the compiler does not.

        E.g. "old style wap"
        #+begin_src C++
          template<class T>
          void swap(T& a, T& b)
          {
              T tmp{a}; // two copies of a
              a = b; // two copies of b
              b = tmp; // two copies of tmp (a's initial value)
          }
        #+end_src

        If T's copy is expensive, this swap would be expensive. But in this function we can actually do "moves":

        #+begin_src C++
          template<class T>
          void swap(T& a, T& b)
          {
              T tmp{static_cast<T&&>(a)};
              a = static_cast<T&&>(b);
              b = static_cast<T&&>(tmp):
          }
        #+end_src

        The above code will use class T's move constructor or move assignment operator.

        =std::move= is introduced to replace =static_cast<T&&>=.

      - Reference collapse (lvalue always wins)

        - =int && &&= is an =int&&=

        - =int & &&= is an =int&=

        - =int && &= is an =int&=

        - =int & &&= is an =int&=

        - *reference to reference can only happen as the result of an alias or a template type argument.*

  14. Pointers and references

      - It's not possible to redefine an operator for a pair of built-in types, such as pointers.
          
* Ch8. Struct, unions and enumerations
** Structs
** Unions
** Enumerations
  1. =enum class= for which the enum names are local to the enum and do not implicitly convert to other values.
  2. "Plain enums" for which the enum names are in the same scope as the enum and implicitly converts to integers.
* Ch9. Statements

  - Declaration is a statement
  - Expression becomes a statement with a ';' at its
  - Statements do not have value, unlike expressions.
    
* Ch10. Expressions

** Constant Expressions (Since C++11)
  - Constant Expressions (constexpr) are evaluated by the compiler.
  - It's all about values, no assignment, no modification of state, no side effects.
  - Literal Types: class with a =constexpr= constructor is called a literal type.
  - =constexpr= functions can take arguments of literal types.
  - const references can also appear in constexpr:

    #+begin_src C++
      template<> class complex<double> {
      public:
          constexpr complex(const complex<float>&);
          explicit constexpr complex(const complex<long double>&);
      }
    #+end_src
  - Address constant expressions

    The address of a statically allocated object is a constant, however its value is assigned by the linker, so the compiler cannot know the value of such an
    address.

    #+begin_src C++
      constexpr const char* p1 = "asdf";
      constexpr const char* p2 = p1; // OK
      constexpr const char* p3 = p1 + 2; // error: the compiler does not know the value of p1
      constexpr const char c = p1[2]; // OK, c=='d', the compiler knows the value pointed to by p1
    #+end_src

* Ch13. Exceptions
** RAII and exception handling
   - Exceptions enable non-local error handling. Dah!
   - An exception can be any object that can be copied.
   - Unhandled exception will terminate the program.
